"use client";

import { useRef } from 'react';
import { Button } from "@/components/ui/button";
import { FileText } from "lucide-react";
import { useUser } from "@clerk/nextjs";
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

interface Prescription {
  drug_name: string;
  dosage: string;
  form: string;
  duration: string;
  instructions: string;
}

interface PDFPrescriptionProps {
  diagnosis: string;
  prescriptions: Prescription[];
  className?: string;
}

export function PDFPrescription({ diagnosis, prescriptions, className }: PDFPrescriptionProps) {
  const { user } = useUser();
  const downloadRef = useRef<HTMLAnchorElement>(null);

  const generatePDF = () => {
    const doc = new jsPDF();
    
    // Set theme colors
    const primaryColor: [number, number, number] = [41, 128, 185]; // Blue color
    const accentColor: [number, number, number] = [52, 152, 219]; // Lighter blue
    const textColor: [number, number, number] = [44, 62, 80]; // Dark text
    
    // Add header with logo and title
    doc.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.rect(0, 0, 210, 30, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.text('PharmaAI', 20, 20);
    doc.setFontSize(12);
    doc.text('Digital Prescription', 20, 30);
    
    // Add date and prescription number
    doc.setTextColor(textColor[0], textColor[1], textColor[2]);
    doc.setFontSize(10);
    const today = new Date();
    const prescriptionNumber = `PR-${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}-${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`;
    doc.text(`Date: ${today.toLocaleDateString()}`, 20, 45);
    doc.text(`Prescription #: ${prescriptionNumber}`, 20, 50);
    
    // Add patient info section
    doc.setFillColor(accentColor[0], accentColor[1], accentColor[2]);
    doc.rect(0, 55, 210, 10, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(12);
    doc.text('Patient Information', 20, 62);
    
    doc.setTextColor(textColor[0], textColor[1], textColor[2]);
    doc.setFontSize(10);
    doc.text(`Name: ${user?.fullName || 'Anonymous Patient'}`, 20, 75);
    doc.text(`Email: ${user?.primaryEmailAddress?.emailAddress || 'Not provided'}`, 20, 80);
    
    // Add diagnosis section
    doc.setFillColor(accentColor[0], accentColor[1], accentColor[2]);
    doc.rect(0, 85, 210, 10, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(12);
    doc.text('Diagnosis', 20, 92);
    
    doc.setTextColor(textColor[0], textColor[1], textColor[2]);
    doc.setFontSize(10);
    const diagnosisLines = doc.splitTextToSize(diagnosis, 170);
    doc.text(diagnosisLines, 20, 105);
    
    // Add prescriptions section
    doc.setFillColor(accentColor[0], accentColor[1], accentColor[2]);
    doc.rect(0, 120, 210, 10, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(12);
    doc.text('Prescribed Medications', 20, 127);
    
    // Create table for prescriptions
    autoTable(doc, {
      startY: 135,
      head: [['Medication', 'Dosage', 'Form', 'Duration', 'Instructions']],
      body: prescriptions.map(p => [
        p.drug_name,
        p.dosage,
        p.form,
        p.duration,
        p.instructions
      ]),
      theme: 'grid',
      headStyles: { 
        fillColor: primaryColor,
        textColor: [255, 255, 255],
        fontSize: 10,
        fontStyle: 'bold'
      },
      bodyStyles: {
        textColor: textColor,
        fontSize: 9
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245]
      },
      margin: { left: 20, right: 20 }
    });
    
    // Add footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.rect(0, pageHeight - 20, 210, 20, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(8);
    doc.text('This is a digital prescription generated by PharmaAI.', 20, pageHeight - 15);
    doc.text('Please consult with your healthcare provider before taking any medication.', 20, pageHeight - 10);
    
    // Save the PDF
    const pdfBlob = doc.output('blob');
    const url = URL.createObjectURL(pdfBlob);
    
    if (downloadRef.current) {
      downloadRef.current.href = url;
      downloadRef.current.download = `prescription-${prescriptionNumber}.pdf`;
      downloadRef.current.click();
      URL.revokeObjectURL(url);
    }
  };

  return (
    <>
      <Button
        variant="outline"
        className={className}
        onClick={generatePDF}
      >
        <FileText className="h-4 w-4 mr-2" />
        Download PDF
      </Button>
      <a ref={downloadRef} style={{ display: 'none' }} />
    </>
  );
} 